{"version":3,"sources":["assets/images/default-userimage.png","components/Loader.js","components/app_icon.js","components/dashboard.js","components/glassware.js","App.js","components/theme.js","serviceWorker.js","index.js"],"names":["module","exports","Component","makeStyles","theme","small","width","spacing","height","large","avatar","flexGrow","props","createStyles","glass","background","useStyles","createMuiTheme","palette","primary","main","indigo","secondary","lightBlue","root","minHeight","backgroundImage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iMAAAA,EAAOC,QAAU,IAA0B,+C,yiBCGrBC,Y,0FCQJC,aAAW,SAACC,GAAD,MAAU,CAC/BC,MAAO,CACHC,MAAOF,EAAMG,QAAQ,GACrBC,OAAQJ,EAAMG,QAAQ,IAExBE,MAAO,CACLH,MAAOF,EAAMG,QAAQ,GACrBC,OAAQJ,EAAMG,QAAQ,Q,mCCGhBJ,aAAW,SAACC,GAAD,MAAU,CACnCM,OAAO,CACLC,SAAS,S,aClBGR,aAAW,SAACS,GAAD,OAAWC,YAAa,CACnDC,MAAO,CACLC,WAAY,8BAEZ,kBAAmB,YAEnB,gBAAiB,a,8BCFfC,GCNQC,YAAe,CACzBC,QAAQ,CAEJC,QAAQ,CACJC,KAAMC,IAAO,MAEjBC,UAAU,CACNF,KAAKG,IAAU,SDDTpB,aAAW,SAACC,GAAD,MAAY,CACvCoB,KAAM,CACJC,UAAW,QACXC,gBAAgB,oFAaLC,MATf,WAEE,OADgBX,IAEd,6DEPgBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bac83c93.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default-userimage.3a298c3f.png\";","import React, { Component } from \"react\";\r\nimport \"./Loader.css\";\r\n\r\nclass Loading extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"loader-overlay\"></div>\r\n        <div className=\"sk-cube-grid cm-spinner\"></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport {\r\n    Avatar,\r\n    Box,\r\n    IconButton,\r\n    makeStyles,\r\n    Typography}  from '@material-ui/core'\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n        small: {\r\n            width: theme.spacing(3),\r\n            height: theme.spacing(3),\r\n          },\r\n          large: {\r\n            width: theme.spacing(7),\r\n            height: theme.spacing(7),\r\n          },\r\n    }))\r\n\r\nexport default function AppIcon(props){\r\n    const classes = useStyles()\r\n\r\n    return (    \r\n        <Box>\r\n            <Avatar src={props.src}\r\n                    className={classes.large}>\r\n            </Avatar>\r\n        \r\n            <IconButton size=\"small\">\r\n                <Typography>\r\n                    {props.name}\r\n                </Typography>  \r\n                <ArrowDropDownIcon/>\r\n            </IconButton>\r\n        </Box>\r\n\r\n    )\r\n}\r\n\r\nfunction AvatarIcon(props){\r\n    const classes = useStyles()\r\n\r\n    return (    \r\n        <Box>\r\n            <IconButton size=\"small\">\r\n                <NotificationsIcon/>\r\n            </IconButton>\r\n            <IconButton size=\"small\">\r\n                <SettingsIcon/>\r\n            </IconButton>\r\n            <Avatar src={props.src}\r\n                    className={classes.large}>\r\n            </Avatar>\r\n        \r\n            \r\n        </Box>\r\n\r\n    )\r\n}\r\nexport {AvatarIcon};\r\n","import React,{useState, useEffect} from 'react';\r\nimport {Drawer,\r\n        Divider,\r\n        Button,\r\n\r\n        Paper,\r\n        Grid,\r\n        ListItem,\r\n        ListItemIcon,\r\n        ListItemText,\r\n        ListItemAvatar,\r\n        makeStyles} from '@material-ui/core'\r\nimport {Streetview, SentimentSatisfied} from '@material-ui/icons'\r\nimport AppIcon, {AvatarIcon} from './app_icon.js'\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\nimport ViewListIcon from '@material-ui/icons/ViewList';\r\nimport { Router, Link } from \"@reach/router\"\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    avatar:{\r\n      flexGrow:'1'  },\r\n }));\r\n\r\nexport default function Dashboard(){\r\n    // Create a state that is displays a page and updated on click\r\n    //\r\n    const app_icon = 'http://entities.boxerproperty.com//Download.aspx?FileID=458702' \r\n    const name = 'Inside Sales'\r\n    const avatar = 'http://services.boxerproperty.com/userphotos/DownloadPhoto.aspx?username=MichaelAF'\r\n    \r\n    const overview = () => {\r\n        console.log('clicked')\r\n        return 'Hello World'\r\n    }\r\n\r\n    const [page,setPage] = useState(null)\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.avatar}>\r\n        <Drawer\r\n        variant=\"permanent\"\r\n        anchor=\"left\"\r\n        color=\"primary\">\r\n            \r\n            <ListItem alignItems='center'>\r\n                <AppIcon src={app_icon}\r\n                        name={name}></AppIcon>\r\n            </ListItem>\r\n        <Divider/>\r\n            <ListItem>\r\n                <ListItemIcon> <Streetview/> </ListItemIcon>\r\n                <ListItemText> <Link to=\"overview\">Overview</Link> </ListItemText>\r\n            </ListItem>\r\n        <Divider/>\r\n            <ListItem button onClick={() => {setPage('Tasks')}}>\r\n                <ListItemIcon> <AssignmentIcon/> </ListItemIcon>\r\n                <ListItemText> Tasks </ListItemText>\r\n            </ListItem >\r\n        <Divider/>\r\n            <ListItem button onClick={() => {setPage('People')}}>\r\n                <ListItemIcon> <PeopleIcon/> </ListItemIcon>\r\n                <ListItemText> People </ListItemText>\r\n            </ListItem>\r\n        <Divider/>\r\n            <ListItem button>\r\n                <ListItemIcon> <ViewListIcon/> </ListItemIcon>\r\n                <ListItemText> Items </ListItemText>\r\n            </ListItem>\r\n        <Divider/>\r\n            <ListItem button>\r\n                <ListItemIcon> <NoteAddIcon/> </ListItemIcon>\r\n                <ListItemText> Forms </ListItemText>\r\n            </ListItem>\r\n        <Divider/>\r\n            <ListItem button>\r\n                <ListItemIcon> <TimelineIcon/> </ListItemIcon>\r\n                <ListItemText> Insights </ListItemText>\r\n            </ListItem>\r\n        <Divider/>\r\n            <ListItem button>\r\n                <ListItemIcon> <PeopleIcon/> </ListItemIcon>\r\n                <ListItemText><Link to=\"case-create\">CaseCreator</Link></ListItemText>   \r\n            </ListItem>\r\n            <Divider/>\r\n            <Button color='secondary'>\r\n                HELOO WROLD\r\n            </Button>\r\n        </Drawer>\r\n        <Grid container>\r\n            <Grid item xs={11}>\r\n            <Paper> {page} </Paper>\r\n            </Grid>\r\n\r\n            <Grid item xs={1}>\r\n                <Paper>\r\n                    <AvatarIcon src ={avatar}/>\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((props) => createStyles({\r\n  glass: {\r\n    background: 'rgba( 255, 255, 255, 0.25 )',\r\n    //'box-shadow':' 0 8px 32px 0 rgba( 31, 38, 135, 0.37 )',\r\n    'backdrop-filter': 'blur(7px)',\r\n    //filter: 'blur(10px)',\r\n    'border-radius': '10px',\r\n  },\r\n}));\r\n\r\nexport default function GlassBox(props){\r\n    const classes = useStyles(props)\r\n    //'url(\"https://source.unsplash.com/random\")'\r\n    const bg = {'background-image':'white',\r\n                'height':'100vh',\r\n                'width':'100wh'}\r\n    \r\n    return (\r\n        <div style = {bg}>\r\n            <Box className={classes.glass}\r\n                 style = {{width:500, height:500, margin:'auto'}}>\r\n                {props.children}\r\n                <div style={{background:'transparent'}}>HELLO WORLD</div>\r\n            </Box>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import { makeStyles, ThemeProvider } from \"@material-ui/core\";\r\nimport { Router } from \"@reach/router\";\r\nimport React from \"react\";\r\nimport \"./App.css\";\r\nimport CaseCreator from \"./components/case_creator.js\";\r\nimport Dashboard from \"./components/dashboard.js\";\r\nimport GlassBox from \"./components/glassware\";\r\nimport OverView from \"./components/overview\";\r\nimport theme from \"./components/theme.js\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    minHeight: \"100vh\",\r\n    backgroundImage: `url(https://icatcare.org/app/uploads/2018/07/Thinking-of-getting-a-cat.png)`,\r\n  },\r\n}));\r\n//<Dashboard></Dashboard>\r\nfunction App() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      Continuous deployment test.\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n/*\r\n    \r\n*/","import { createMuiTheme } from \"@material-ui/core\"\r\nimport {indigo, lightBlue } from \"@material-ui/core/colors\"\r\n\r\nconst theme = createMuiTheme({\r\n    palette:{\r\n       \r\n        primary:{\r\n            main: indigo[500]\r\n        },\r\n        secondary:{\r\n            main:lightBlue[500]\r\n        }\r\n\r\n    }\r\n})\r\n\r\nexport default theme;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}